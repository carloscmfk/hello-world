--Editando o arquivo

SET serveroutput ON
SET linesize 10000

whenever sqlerror exit failure rollback
whenever oserror exit failure rollback

COLUMN dcol NEW_VALUE MYDATE NOPRINT
select to_char(current_timestamp, 'YYYYMMDDHH24MISS') dcol from dual;

spool add85xIdx_&mydate..log

--
-- Indexes metadata
-- 
DECLARE
  v_tableExists     NUMBER(1,0);
  v_tablespaceName  VARCHAR2(255);
  v_stmt            VARCHAR2(4000);
  
BEGIN
  
  select tablespace_name  
    INTO v_tablespaceName 
    from user_tables where table_name = 'SYSTEM_PROPERTY';
  	
  SELECT COUNT(*) into v_tableExists FROM user_tables WHERE UPPER(TABLE_NAME) = 'DISABLE_INDEX_LIST_TABLE';
  IF v_tableExists > 0 THEN
    v_stmt := 'DROP TABLE DISABLE_INDEX_LIST_TABLE';
    EXECUTE IMMEDIATE v_stmt;
  END IF;
  
  v_stmt := 'CREATE TABLE DISABLE_INDEX_LIST_TABLE(index_name VARCHAR2(50)) TABLESPACE ' || v_tablespaceName;
  EXECUTE IMMEDIATE v_stmt;  
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3265_WF_PARAMS_PAGE_INFO'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3267_WF_PARAMS_GROUP_INFO'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1301_DEVICE_ID'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_VIRTUAL_SERIAL_AD'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_VIRTUAL_ETH_ADP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2548_CONFIG_FILE_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2758_CR_GROUP_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2436_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_BLROLE_AUTOMATION_PRINCIP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPGENERIC_STORAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPGENERIC_NETWORK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPGENERIC_ADVANCED'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1090_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK392_NOTIFICATION'')
  
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2397_SCAP_RESULT_TARGET_DAT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2393_SCAP_RULE_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK170_EXECUTION_PROTOCOL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_PROV_RES_LEGACY_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1604_PROPERTY_SET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK394_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_IMG_CAPT_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK198_CONDITION_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1451_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK483_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2443_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK619_BL_ASSET_CLASS_DELTA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_JOB_RESULT_DEPOT_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK130_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_DBD_SPECIFIC_DIAGNOSIS_ME'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_MEASURE_POP_ERR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_DBD_DBMEASURE_MEASURE_POP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_DBMEASURE_MEASURE_POP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_DBMEASURE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK021_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2518_OS_USER'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7005_NIMBUS_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7012_NTI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7014_NTI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK13_NOTIFICATION_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_KEY_STORE_DATA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_JOB'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK163_ASSET_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK147_JOB_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK140_SERVER_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1428_APPROVAL_TYPE'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VSMJOB_DELETION_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1304_JOB'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_FILE_SYSTEM'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1196_JOB_RESULT'')	
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK005_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK005_ASSET_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2645_SYSTEM_PACKAGE_NIM'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2640_SYSTEM_PACKAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX16_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK157_CARDINALITY_OPTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2401_SCAP_RESULT_NETWORK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK120_ROUTING_RULE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK80_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK404_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_GENERIC_ASSET_PATH'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK150_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DEVICE_PROPERTY_DETAIL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_BL2ATR_CUSTOMIZATION_DATA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1016_AUDITRSLT_2_TKN_RULESE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK636_BL_ASSET_CLASS_DELTA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK640_COMPLIANCE_RULE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK948_EXIT_CODE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2715_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_SPECIFIC_DIAGNOSIS_PA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_SPECIFIC_DIAGNOSIS_ME'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_DIAGNOSIS_XCUTN_PARAM'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_DIAGNOSIS_XCUTN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_DBD_DBMEASURE'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7022_AUDIT_TRAIL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7_LDAP_SYNC_QUERY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2533_JOB_RESULT'')	
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK141_DATABASE_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK326_ACL_SECURITY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3273_WORKFLOW_PARAMS_PAGE_I'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3266_WORKFLOW_PARAMETER'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VSMUNREGISTERED_VMS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3264_WORKFLOW'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_LHEALOGICAL_PORT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK293_ASSET_ACTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX22_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK011_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK02_BL_ACL_BL_ACL_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPACKAGE_VMWARE_PROP_REF'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_TOKEN_RULE_SET'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK246_TEMPLATE_PART'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK007_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2643_SYSTEM_PACKAGE_NIM'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1560_ASSET_SELECTOR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2394_SCAP_RULE_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK122_ROUTING_RULE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2756_REPAIR_ACTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_RSLVDSYSPKCDC_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK58_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK333_BL_PATCH_LANGUAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK256_COMPLIANCE_RULE_GRP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3270_PROPERTY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK486_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_BL2ATR_CUSTOMIZATION_DATA'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2722_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK638_BL_ASSET_CLASS_DELTA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK643_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_DBMEASURE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_DAAL_PLUGIN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7010_NTI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7002_DEPOT_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK5_LDAP_SYNC_QUERY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_LDAP_SYNC_QUERY'')
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_LDAP_CONNECTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_KEY_STORE_DATA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2211_JOB'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7_ASSET_ACTION'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK012_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK613_ASSET_ACTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_VSMJOB_ORPHAN_REMED_MAPPI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_RESOURCE_CONTROL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_INHERITED_PKG_DIR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPRHELKVMNETWORK_ADDRESS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK292_ASSET_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2193_EXTENDED_OBJECT_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK004_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK259_OPERATION_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK125_REMOTE_HOST_AUTH'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK124_ROUTING_RULE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK110_ROUTING_RULE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK81_APPLICATION_SERVER_MODEL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK162_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK161_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1197_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK197_CONDITION_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK250_CR_GROUP_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK334_HOTFIX_SERVICE_PACK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_FILE_SERVER'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK487_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2243_DOT_NET_ASSEMBLY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_BL2ATR_AIESERVER_CONFIG'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1016_AUDIT_JOB_2_TKN_RULESE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2532_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2530_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2528_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX12_JOB_NSH_PARAM_RUNTIME'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_DIAGNOSIS_XCUTN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_DBD_DBMEASURE_MEASURE_POP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_DBMEASURE_MEASURE_POP'')
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_PATCHING_JOB_RUN_PART'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2520_OS_GROUP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7011_NTI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK149_REPEATER_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3272_WORKFLOW_PARAMS_GROUP_'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_DEVICE'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2328_JOB_RUN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_BLROLE_AUTOMATION_PRINCIP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_BLROLE_AUTOMATION_PRINCIP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPCITRIX_XEN_DISK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPACKAGE_PROP_REF'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK260_OPERATION_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK003_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2648_SYSTEM_PACKAGE_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK111_APPLICATION_SERVER_MODE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK100_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK233_REPAIR_OPTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK169_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_PROV_RES_PROP_VAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK249_CR_GROUP_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK335_HOTFIX_SEVERITY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK013_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK485_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK493_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK484_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK601_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_DEPLOY_JOB_RUN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_SPECIFIC_DIAGNOSIS_PA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_DBD_SPECIFIC_DIAGNOSIS_ME'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_PARAM'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_ORACLE_PRIV_MEASURE_P'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK331_PATCH_CONFIG_FILE_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7007_NIMBUS_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7020_BLACL'')	
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1443_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2424_ASSET_SELECTOR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1562_ASSET_SELECTOR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK8_ASSET_ACTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK150_REM_AUTH_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK142_WORK_ITEM_ROUTING_POLIC'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK173_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK172_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_VSMJOB_ORPHAN_REMED_MAPPI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK266_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_BLROLE_AUTOMATION_PRINCIP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPCITRIX_XEN_NETWORK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2639_SYSTEM_PACKAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2399_SCAP_RESULT_TARGET_DAT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK163_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK166_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK934_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK332_OS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK163_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK337_BL_PATCH_LANGUAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK232_DISPLAY_STRING_SET'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK610_ASSET_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2531_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX2_DEPOT_SWSUPP_FILE_LOC'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX2_DEP_JOB_COMPNT_PROP_MAP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK_DLTSKSTAT_DLTSK_TASK_ID'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_ORACLE_PRIV_MEASURE_P'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_MEASURE_POP_ERR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7001_DEPOT_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK6_LDAP_SYNC_QUERY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2536_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1561_ASSET_SELECTOR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK009_ASSET_ATTRIBUTE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_GENERIC_ASSET'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK402_CONDITION'')
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1002_XCCDF_BENCHMARK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3262_JOB_RUN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1302_DEVICE_ID'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_DATA_SET'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPRHELKVMSTORAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_IOSLOT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK245_ASSET_SELECTOR'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2649_SYSTEM_PACKAGE_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2650_SYSTEM_PACKAGE_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_SYMMETRIC_KEY'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1089_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK96_REPEATER_SERVER'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK72_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_RSLVDSYSPKCDC_PM_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_PROV_RES_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1204_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK164_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK255_COMPLIANCE_RULE_GRP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK338_HOTFIX_SERVICE_PACK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK10_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK4_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK633_TEMPLATE_PART'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2119_JOB_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_JOB_RESULT_COMPONENT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK378_NOTIFICATION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7016_PM_DEVICE_INFO'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_JOB_RESULT_BLGROUP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX2_DEPOT_OBJECT_LOCATION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK_DLSTK_DLLYR_DLLYRID'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_ORACLE_PRIV_SPECIF_DI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_LDAP_QUERY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK15_LDAP_CONNECTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK158_OBJECT_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_ASSET_ACTION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK148_NET_PROXY_ROUTING_POLIC'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3_AGENT_PACKAGE'')
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_CONDITION'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK3266_WORKFLOW_PARAMETER_INF'')	
  --INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VSM_ORPHAN_TEMPLATE_RESUL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPZONE_NETWORK_ADDRESS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_VIRTUAL_SCSI_ADP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_VGPLPAR_VIRTUAL_FCADP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2757_COMPLIANCE_RULE_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2761_COMPLIANCE_RULE_GRP'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2514_JOB'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK103_OBJECT_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK101_BL_AUTH'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK02_BL_ACL_BL_ACE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2641_SYSTEM_PACKAGE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2644_SYSTEM_PACKAGE_NIM'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2647_SYSTEM_PACKAGE_IGNITE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK219_ASSET_SELECTOR_RESULT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2398_SCAP_RESULT_TARGET_DAT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2395_SCAP_RULE_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2396_SCAP_RULE_OBJECT'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2400_SCAP_RESULT_NETWORK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK123_REPEATER_SERVER'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK95_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK90_ROUTING_POLICY'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK70_ROUTING_POLICY_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK168_AUTOMATION_PRINCIPAL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK167_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_PROV_PROP_VAL_PM_DEV'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_PROV_RES_LEG_PM_DEVICE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK23_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK336_HOTFIX_STATUS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2225_GPO_SETTING'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK488_EXECUTION_TASK'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_BL2ATR_BSARADB_CONFIG'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK001_OPERATION_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK631_BL_ASSET_CLASS_DELTA'')	
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'INSERT ALL
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK641_BL_ASSET_CLASS_DELTA'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK952_EXIT_CODE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DEPLOY_JOB_RUN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK_DLLYRTYP_DLTSKTYP_TSKTYPID'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_SPECIFIC_DIAGNOSIS_ME'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_ORACLE_PRIV_SPECIF_DI'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1_DBD_DIAGNOSIS_XCUTN_RESUL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2_DBD_DIAGNOSIS_XCUTN_PARAM'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2183_OBJECT_TYPE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7006_NIMBUS_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK7009_NIMBUS_TEMPLATE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFKX2_JOB_RUN'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK004_BL_ASSET_CLASS'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK145_BL_ACL'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2221_BLROLE'')	
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1442_AO_CONFIG'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2671_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1102_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1098_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1089_JOB_RESULT'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2676_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1096_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2675_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2678_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2666_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2667_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2668_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1100_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2669_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2672_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2659_JOB_RESULT'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK732_TEMPLATE'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2674_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1104_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2677_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2670_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2679_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1107_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK2673_SNAPSHOT_PART'')
  INTO DISABLE_INDEX_LIST_TABLE(index_name)  VALUES (''XFK1115_SNAPSHOT_PART'')
  select * from dual';
  EXECUTE IMMEDIATE v_stmt;
  COMMIT;  
  
  SELECT COUNT(*) INTO v_tableExists FROM USER_TABLES WHERE UPPER(TABLE_NAME) = 'ADD_BMC_IDX_TABLE';  
  IF v_tableExists > 0 THEN
    v_stmt := 'DROP TABLE ADD_BMC_IDX_TABLE';
    EXECUTE IMMEDIATE v_stmt;
  END IF;
  	
  v_stmt := 'CREATE TABLE ADD_BMC_IDX_TABLE (
     idx_name        VARCHAR2(255)    NOT NULL,
     idx_table_name  VARCHAR2(255)    NOT NULL,
     idx_size        NUMBER           NOT NULL,
     idx_col_name1   VARCHAR2(255)    NOT NULL,
     idx_col_name2   VARCHAR2(255),
     idx_col_name3   VARCHAR2(255),
     idx_col_name4   VARCHAR2(255),
     idx_col_name5   VARCHAR2(255),
     idx_col_name6   VARCHAR2(255)
    ) TABLESPACE ' || v_tablespaceName; 
  EXECUTE IMMEDIATE v_stmt;

  -- DBMS_OUTPUT.PUT_LINE('Create table sql text : ' || v_stmt);
  --
  -- First set of 39 performance improvement indexes
  --
  
  -- QM001812390
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_JOB_NSH_PARM_RTIME_DPOID'',''JOB_NSH_PARAM_RUNTIME'',2,''DEPOT_OBJECT_ID'',''DEPOT_OBJECT_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_BLVL_OTYPE_ISDEL'',''BL_VALUE'',2,''OBJECT_TYPE_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_SNAP_AUTH_DJR_COMPID'',''SNAPSHOT_AUTH_DEPLOY_JOB_RUNS'',2,''COMPONENT_ID'',''COMPONENT_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_ACEVAL_ISDEL_VALID'',''ACEVALUE'',2,''IS_DELETED'',''ACE_VALUE_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK744_JOB_RUN'',''DEPLOY_JOB_RUN'',1,''DEPLOY_JOB_RUN_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_JR_JRID_OTYPE_ISDEL'',''JOB_RUN'',3,''JOB_RUN_ID'',''OBJECT_TYPE_ID'',''IS_DELETED'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_JRE_JRID_ISDEL'',''JOB_RUN_EVENT'',2,''JOB_RUN_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_JOB_JOBID_OTYPE_ISDEL'',''JOB'',4,''JOB_ID'',''JOB_VERSION_ID'',''OBJECT_TYPE_ID'',''IS_DELETED'',NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''IDX_PSI_BLVAL_ISDEL'',''PROPERTY_SET_INSTANCE'',2,''BL_VALUE_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK2JOB_OPTION_VALUE'',''JOB_OPTION_VALUE'',2,''JOB_ID'',''JOB_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_PSI_BL_ACL_ID'',''PROPERTY_SET_INSTANCE'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_PSC_BL_ACL_ID'',''PROPERTY_SET_CLASS'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_SRV_CFG_DFN_BL_ACL_ID'',''SERVER_CONFIG_DEFINITION'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_BL_ASSET_CLASS_BL_ACL_ID'',''BL_ASSET_CLASS'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  -- QM001808426
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA28JOB_RUN'',''JOB_RUN'',6,''IS_DELETED'',''JOB_ID'',''JOB_VERSION_ID'',''BL_VALUE_ID'',''DATE_MODIFIED'',''PROGRESS_STATUS_ID'')';
  EXECUTE IMMEDIATE v_stmt;
  
  -- QM001811017
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_EVALUE_DSTRING_SET_ID'',''ENUMERATED_BL_VALUE'',1,''DISPLAY_STRING_SET_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK_JOB_RUN_SHEDULE_ID'',''JOB_RUN'',1,''SCHEDULE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  -- QM001811013
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK145_BL_ACL'',''APPLICATION_SERVER_MODEL'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK162_BL_ACL'',''REPEATER_SERVER'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK72_BL_ACL'',''ROUTING_POLICY'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFKX22_BL_ACL'',''BL_MNT_WINDOW'',1,''MNT_WINDOW_BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK7020_BLACL'',''NIMBUS_TEMPLATE_INSTANCE'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK4_AUTOMATION_PRINCIPAL'',''AUTOMATION_PRINCIPAL'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK167_BL_ACL'',''REMOTE_HOST_AUTHENTICATION'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK172_BL_ACL'',''ADDM_CONFIG'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK3_LDAP_QUERY'',''LDAP_QUERY'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK4_LDAP_CONNECTION'',''LDAP_CONNECTION'',1,''BL_ACL_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XDEL2DEPOT_OBJECT_LOCATION'',''DEPOT_OBJECT_LOCATION'',2,''BLFILE_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XDEL2AUDIT_BLFILE'',''AUDIT_BLFILE'',2,''BLFILE_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XDELSNAPSHOT_BLFILE'',''SNAPSHOT_BLFILE'',2,''BLFILE_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA1BATCH_JOB_RUN'',''BATCH_JOB_RUN'',3,''JOB_RUN_ID'',''BATCH_JOB_ID'',''BATCH_JOB_VERSION_ID'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA1JOB_RESULT_DEVICE'',''JOB_RESULT_DEVICE'',3,''RESULT_ID'',''PROGRESS_STATUS_ID'',''DEVICE_ID'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA4JOB_RESULT'',''JOB_RESULT'',1,''JOB_RUN_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA5JOB_RESULT'',''JOB_RESULT'',3,''RESULT_ID'',''JOB_ID'',''JOB_VERSION_ID'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK1_VGPRUN_ONCE_CMD'',''VGPRUN_ONCE_CMD'',1,''CUSTOM_CONFIG_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK1_BL_ASSET_CLASS'',''BL_ASSET_CLASS'',2,''ASSET_CLASS_LIBRARY_ID'',''ASSET_CLASS_LIBRARY_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK2_BL_ASSET_CLASS'',''BL_ASSET_CLASS'',2,''LIB_ASSET_CLASS_ID'',''LIB_ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA1_PAJOB_PATCH_DETAILS'',''PAJOB_PATCH_DETAILS'',2,''JOB_ID'',''DEVICE_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA1OBJECT_OVERFLOW_DETAIL'',''OBJECT_OVERFLOW_DETAIL'',1,''IS_DELETED'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  --
  -- Second set of 37 performance improvement indexes
  --
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK326_ACL_SECURITY'',''ACL'',1,''GROUP_SECURITY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK009_ASSET_ATTRIBUTE'',''ASSET_ATTRIBUTE_VALUE'',1,''ASSET_ATTRIBUTE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK292_ASSET_ATTRIBUTE'',''BL_PACKAGE_ATTRIBUTE_REF'',1,''ASSET_ATTRIBUTE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK610_ASSET_ATTRIBUTE'',''ATTRIBUTE_DELTA'',1,''ASSET_ATTRIBUTE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK163_ASSET_ATTRIBUTE'',''ASSET_SELECTOR_ASSET_ATTRIBUTE'',1,''ASSET_ATTRIBUTE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK013_BL_ASSET_CLASS'',''GENERIC_ASSET'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK004_BL_ASSET_CLASS'',''ASSET_SELECTOR'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK007_BL_ASSET_CLASS'',''TEMPLATE_PART'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK005_BL_ASSET_CLASS'',''TEMPLATE_CLASS_REF'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK011_BL_ASSET_CLASS'',''BL_ASSET_CLASS_CHILDREN'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK021_BL_ASSET_CLASS'',''DAAL_PLUGIN_CLASS'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK601_BL_ASSET_CLASS'',''DEREGISTERED_CLASS'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK3_BL_ASSET_CLASS'',''TOKEN_RULE_SET'',2,''ASSET_CLASS_ID'',''ASSET_CLASS_VERSION_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK636_BL_ASSET_CLASS_DELTA'',''JOB_RESULT_INVALID_TP'',1,''DELTA_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK631_BL_ASSET_CLASS_DELTA'',''JOB_RESULT_INVALID_JOB_TP'',1,''DELTA_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK619_BL_ASSET_CLASS_DELTA'',''JOB_RESULT_INVALID_ITEM'',1,''DELTA_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK638_BL_ASSET_CLASS_DELTA'',''JOB_RESULT_INVALID_RULE'',1,''DELTA_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK641_BL_ASSET_CLASS_DELTA'',''JOB_RESULT_INVALID_COND'',1,''DELTA_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK001_CONDITION'',''APPLICABILITY_CONDITION'',1,''CONDITION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK404_CONDITION'',''ICON_CONDITION'',1,''CONDITION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK394_CONDITION'',''IMPL_APPLICABILITY'',1,''CONDITION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK402_CONDITION'',''ACTION_ENABLE_CONDITION'',1,''CONDITION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK643_CONDITION'',''JOB_RESULT_INVALID_COND'',1,''CONDITION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK8_ASSET_NDSSI_ACTION'',''ASSET_ACTION'',1,''NAME_DISP_STR_SET_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK9_ASSET_ACSAAI_ACTION'',''ASSET_ACTION'',1,''ACT_CONF_DISP_STR_SET_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK934_JOB_RESULT'',''PATCH_CUJ_RESULT'',1,''RESULT_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK2328_JOB_RUN'',''COMPLIANCE_REMEDIATION_RUN'',1,''COMPLIANCE_JOB_RUN_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK15_LDAP_CONNECTION'',''LDAP_CONNECTION'',1,''TRUST_STORE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK4_SYMMETRIC_KEY'',''SYMMETRIC_KEY'',1,''KEY_STORE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK2_KEY_STORE_DATA'',''KEY_STORE_DATA'',1,''DATA_ELEMENT_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK5_LDAP_SYNC_QUERY'',''LDAP_SYNC_QUERY'',1,''LDAP_CONNECTION_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK7_LDAP_SYNC_QUERY'',''LDAP_SYNC_QUERY'',1,''GROUP_QUERY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK6_LDAP_SYNC_QUERY'',''LDAP_SYNC_QUERY'',1,''USER_QUERY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK7016_PM_DEVICE_INFO'',''JOB_PM_DEVICE'',2,''PM_DEVICE_INFO_ID'',''PM_DEVICE_ID'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFKX2_DEP_JOB_COMPNT_PROP_MAP'',''DEPLOY_JOB_COMPONENT_PROP_MAP'',1,''PACKAGE_PROPERTY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK3270_PROPERTY'',''EXECUTION_TASK_OVERRIDDEN_PROP'',1,''PROPERTY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) VALUES (''XFK4_BLROLE_AUTOMATION_PRINCIP'',''BLROLE_AUTOMATION_PRINCIPAL'',1,''PROPERTY_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) VALUES (''XFK1EXTENDED_OBJECT_CLASS'',''EXTENDED_OBJECT_CLASS'',3,''TEMPLATE_ID'',''TEMPLATE_VERSION_ID'',''NAME'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) VALUES (''IDX_JR_BL_VALUE_ID'',''JOB_RUN'',1,''BL_VALUE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) VALUES (''XFK1015_AUDITRSLT_2_TPL_PART'',''AUDIT_RESULT_PART_RULE_SET'',3,''TEMPLATE_ID'',''TEMPLATE_VERSION_ID'',''TEMPLATE_PART_ID'',NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  -- QM001751963
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''UXA1GENERIC_ASSET'',''GENERIC_ASSET'',2,''META_CHECKSUM_HI'',''META_CHECKSUM_LO'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  -- QM001778758
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XDEL3JOB_RESULT_COMPONENT'',''JOB_RESULT_COMPONENT'',2,''RESULT_ID'',''IS_DELETED'',NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  -- For speed up of hard delete shared objects
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK1_EXECUTION_TASK'',''EXECUTION_TASK'',1,''BL_VALUE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;

  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK1_VGUEST_SERVER_PROPS'',''VIRTUAL_GUEST_SERVER_PROPS'',1,''BL_VALUE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;

  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK1_JRUN_OVRD_PSI'',''JOB_RUN_OVERRIDDEN_PSI'',1,''PSI_BL_VALUE_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;

  -- For performance improvement of tasks in Progress refresh
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XA5BL_ACL_POLICY_AGG_AUTH'',''BL_ACL_POLICY_AGG_AUTH'',6,''ROLE_ID'',''BL_ACL_POLICY_ID'',''BL_AUTH_ENUM_ID'',''OBJECT_TYPE_ID'',''START_TIME'',''END_TIME'')';
  EXECUTE IMMEDIATE v_stmt;

  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK01_SNAPSHOT_GENERIC_ASSET'',''SNAPSHOT_GENERIC_ASSET'',1,''ASSET_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  v_stmt := 'insert into ADD_BMC_IDX_TABLE (idx_name,idx_table_name,idx_size,idx_col_name1,idx_col_name2,idx_col_name3,idx_col_name4,idx_col_name5,idx_col_name6) values (''XFK01_AUDIT_GENERIC_ASSET'',''AUDIT_GENERIC_ASSET'',1,''ASSET_ID'',NULL,NULL,NULL,NULL,NULL)';
  EXECUTE IMMEDIATE v_stmt;
  
  COMMIT;
END;
/


DECLARE  
  v_exists                  NUMBER;
  v_exists_diffname         NUMBER;
  v_index_name              VARCHAR2(30);
  v_collist                 VARCHAR2(255);
  v_errormessage            VARCHAR2(500);
  v_pk_col_list             VARCHAR2(255);
  v_cr_ins_statement        VARCHAR2(4000);
  v_begin_creation_datetime VARCHAR2(50);
  v_ref_number		        VARCHAR2(50);
  v_db_version		        VARCHAR2(50);

  v_timestart               NUMBER;      
  v_cnt                     NUMBER;
  v_isEnterprise            NUMBER;
  v_idxNameExists           NUMBER;
  v_col1Exists              NUMBER;
  v_col2Exists              NUMBER;
  v_col3Exists              NUMBER;
  v_col4Exists              NUMBER;
  v_col5Exists              NUMBER;
  v_col6Exists              NUMBER;
  v_tablespace_name         VARCHAR2(255);
  v_dupIdxTableName         VARCHAR2(255);
  v_sqltext                 VARCHAR2(4000);
  
  CURSOR get_constraint_list IS
      SELECT uc.constraint_name, uc.table_name, constraint_collist(uc.constraint_name) collist
        FROM user_constraints uc
       WHERE constraint_type = 'R'
         AND 'X' || substr(uc.constraint_name,1,29) NOT IN
         (
          select index_name from DISABLE_INDEX_LIST_TABLE
         )
       ORDER BY uc.table_name, uc.constraint_name;  
   
  CURSOR addIdxCursor IS
    SELECT idx_name, idx_table_name, idx_size, idx_col_name1, idx_col_name2,
           idx_col_name3, idx_col_name4, idx_col_name5, idx_col_name6
    FROM ADD_BMC_IDX_TABLE
   WHERE EXISTS (select 1 from tabs where tabs.table_name = ADD_BMC_IDX_TABLE.idx_table_name);
   
  PROCEDURE crt_indx
  (
    p_unique          IN  VARCHAR2,
    p_indx_name       IN  VARCHAR2,
    p_tbl_name        IN  VARCHAR2,
    p_cols            IN  VARCHAR2,
    p_tablespace_name IN  VARCHAR2,
    p_isEnterprise    IN  NUMBER
  ) AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_statement         VARCHAR2(4000);
    v_indx_tablespace   VARCHAR2(30);	
  BEGIN 
    IF p_tablespace_name IS NULL THEN
      SELECT MIN(tablespace_name) 
        INTO v_indx_tablespace
        FROM ( 
              SELECT COUNT(*) nbr_tbls,
                     tablespace_name
                FROM user_indexes 
               GROUP BY tablespace_name
             ) 
       WHERE nbr_tbls = (
                         SELECT max(nbr_tbls) 
                           FROM (
                                 SELECT COUNT(*) nbr_tbls,
                                        tablespace_name
                                   FROM user_indexes 
                                  GROUP BY tablespace_name
                                ) 
                        );
    ELSE
      v_indx_tablespace := p_tablespace_name;
    END IF;
    
    IF p_isEnterprise = 0 THEN
      v_statement := 'CREATE '||p_unique|| ' INDEX '|| p_indx_name || ' ON ' ||
                     p_tbl_name || p_cols || 'PARALLEL TABLESPACE ' || v_indx_tablespace;					 
    ELSE
      v_statement := 'CREATE '||p_unique|| ' INDEX '|| p_indx_name || ' ON ' ||
                     p_tbl_name || p_cols || 'PARALLEL TABLESPACE ' || v_indx_tablespace || ' ONLINE';
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_statement);
    EXECUTE IMMEDIATE (v_statement);
        
    v_statement := 'ALTER INDEX ' || p_indx_name || ' NOPARALLEL ';
    EXECUTE IMMEDIATE (v_statement);
        
    COMMIT;
    RETURN;
  END crt_indx;   
    
BEGIN 
  
  remediation_log_start('add85xIdx.sql','Add indexes for performance improvement');
  v_timestart := DBMS_UTILITY.GET_TIME();
  
  SELECT count(*) 
    INTO v_isEnterprise
    FROM v$version
   WHERE banner like '%Enterprise%';  
  
  SELECT s2.tablespace_name 
    INTO v_tablespace_name 
    FROM (SELECT s.tablespace_name, 
                 row_number () over (ORDER BY s.cnt DESC) rn 
            FROM (SELECT tablespace_name, 
                         count(*) cnt 
                    FROM user_indexes 
                   GROUP BY tablespace_name) s
         ) S2 
   WHERE S2.RN = 1;   
  
  --
  -- create adhoc_index_list_table if not exists. 
  -- This table will be used to track index being added
  --
  SELECT  count(1) INTO v_exists FROM user_tables WHERE UPPER(table_name)='ADHOC_INDEX_LIST_TABLE';
  IF v_exists =0 THEN
    v_cr_ins_statement := 'create table adhoc_index_list_table
     (
       ref_number varchar2(50),
       db_version varchar2(50),
       index_name varchar2(50),
       index_col_list varchar2(500),
       table_name varchar2(50),
       begin_creation_datetime varchar2(50),
       end_creation_datetime varchar2(50)
     ) TABLESPACE ' || v_tablespace_name;
    
    EXECUTE IMMEDIATE v_cr_ins_statement;
  END IF;
  
  SELECT value INTO v_db_version FROM system_property WHERE name='DatabaseVersion';
  v_ref_number:='QM001784134';
  
  FOR constraint_rec IN get_constraint_list
  LOOP
    dbms_output.put_line( 'Started validating for Table :' || constraint_rec.table_name || ',constraintName :' || constraint_rec.constraint_name);
        
    -- check whether Primary key columns are same as foreign key columns 
    -- if yes then no need to create any index or rename the index.
    BEGIN
      SELECT constraint_collist(constraint_name)
        INTO v_pk_col_list
        FROM user_constraints uc
       WHERE constraint_type = 'P'
         AND table_name = constraint_rec.table_name;                
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
             v_pk_col_list := ' ';
    END;
            
    IF v_pk_col_list <> constraint_rec.collist THEN
      BEGIN
        SELECT 1, index_collist(constraint_rec.constraint_name)
          INTO v_exists, v_collist
          FROM user_indexes
         WHERE index_name = 'X' || substr(constraint_rec.constraint_name,1,29);
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            v_exists := 0;
            v_collist := ' ' ;
      END;
            
      BEGIN
        SELECT 1, index_name 
          INTO v_exists_diffname, v_index_name
          FROM user_indexes
         WHERE index_name <> 'X' || substr(constraint_rec.constraint_name,1,29)
           AND table_name = constraint_rec.table_name	 
           AND index_collist(index_name) = constraint_rec.collist;
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            v_exists_diffname := 0;
            v_index_name := ' ' ;
      END;
            
      dbms_output.put_line( 'v_exists :' || v_exists || ',v_exists_diffname :' || v_exists_diffname);
      v_begin_creation_datetime:=  to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');

      IF v_exists  = 0 AND v_exists_diffname = 0 THEN 
        dbms_output.put_line( 'Creating index for constraint - ' || constraint_rec.collist);
                                  
        crt_indx(NULL,
                 'X' || substr(constraint_rec.constraint_name,1,29),
                 constraint_rec.table_name,
                 '(' || constraint_rec.collist || ')',
                 v_tablespace_name,
                 v_isEnterprise); 
      
        -- insert into adhoc_index_list_table   
        v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' || 
                               to_char(v_ref_number) || ''',''' || 
                               to_char(v_db_version) || ''',''' || 
                               'X' || substr(constraint_rec.constraint_name,1,29) || ''',''' || 
                               to_char(constraint_rec.collist) || ''','''  || 
                               constraint_rec.table_name ||''',''' || 
                               v_begin_creation_datetime ||''',''' || 
                               to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM')||''')';
                
        EXECUTE IMMEDIATE v_cr_ins_statement;
        COMMIT;
    
      END IF;
    END IF;
  END LOOP;
  
  --
  -- create indexes on FKs and for speed up of conditional deletes
  --
   
  FOR idx_rec IN addIdxCursor
  LOOP
    -- DBMS_OUTPUT.PUT_LINE('Index name       : ' || idx_rec.idx_name);
    -- DBMS_OUTPUT.PUT_LINE('Index table name : ' || idx_rec.idx_table_name);
    -- DBMS_OUTPUT.PUT_LINE('Index size       : ' || idx_rec.idx_size);
    DBMS_OUTPUT.PUT_LINE('----------------------------------------');
     
    CASE
      --
      -- Case 1:
      --
      WHEN idx_rec.idx_size = 1 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with column ['  || idx_rec.idx_col_name1 || ']'); 
          
          SELECT count(*) 
            INTO v_cnt  
            FROM (select max(case when column_position = 1 then column_name else null end) position1
                    from user_ind_columns 
                   WHERE table_name = idx_rec.idx_table_name
                   GROUP BY index_name) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1;
           
          IF v_cnt = 0 
          THEN
            SELECT COUNT(*) 
              INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN
              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE COLUMN_NAME = idx_rec.idx_col_name1
                 AND TABLE_NAME  = idx_rec.idx_table_name;
              
              IF v_col1Exists > 0 
              THEN
                			  
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');
                
                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1  || ') tablespace ' || v_tablespace_name;
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1  || ') tablespace ' || v_tablespace_name || ' online';                       
                END IF;
				
                DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);
                EXECUTE IMMEDIATE (v_sqltext);
				
                -- insert into adhoc_index_list_table   
                v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                      to_char(v_ref_number) || ''',''' || 
                                      to_char(v_db_version) || ''',''' || 
                                      idx_rec.idx_name || ''',''' || 
                                      idx_rec.idx_col_name1 || ''',''' || 
                                      idx_rec.idx_table_name ||''',''' || 
                                      v_begin_creation_datetime ||''',''' || 
                                      to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM')||''')';
                
                DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.'); 
              
              END IF;
            ELSE
              SELECT table_name 
   	            INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.'); 
            END IF;
          ELSE 
            BEGIN	            
              FOR v_rec IN (select s_ind.index_name idxname
                              from (select index_name,
                                           max(case when column_position = 1 then column_name else null end) position1
                                      from user_ind_columns 
                                     where table_name = idx_rec.idx_table_name
                                     group by index_name ) s_ind
                             where s_ind.position1 = idx_rec.idx_col_name1) LOOP
                IF (idx_rec.idx_name = v_rec.idxname)
                THEN
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                ELSE
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                END IF;
              END LOOP;
            END;
          END IF;                      
       END;         
       
      --
      -- Case 2:
      --
      WHEN idx_rec.idx_size = 2 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with columns [' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ']');
          SELECT count(*) 
            INTO v_cnt  
            FROM (select max(case when column_position = 1 then column_name else null end) position1,
                         max(case when column_position = 2 then column_name else null end) position2
                    from user_ind_columns 
                   where table_name = idx_rec.idx_table_name
                   group by index_name ) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1
             AND s_ind.position2 = idx_rec.idx_col_name2;
             
          IF v_cnt = 0 
   	  THEN
            SELECT COUNT(*) 
   	      INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN
             
              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name1
                 AND TABLE_NAME = idx_rec.idx_table_name; 
              
              SELECT count(*) 
                INTO v_col2Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name2
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              IF (v_col1Exists > 0 and v_col2Exists > 0)
              THEN
              
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');
          
                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ') tablespace ' || v_tablespace_name;
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);     
                  EXECUTE IMMEDIATE (v_sqltext);
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ') tablespace ' || v_tablespace_name || ' online';          
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);  
                  EXECUTE IMMEDIATE (v_sqltext);
                END IF;
				
                -- insert into adhoc_index_list_table   
                v_collist := idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2;
                v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                      to_char(v_ref_number) || ''',''' || 
                                      to_char(v_db_version) || ''',''' || 
                                      idx_rec.idx_name || ''',''' || 
                                      v_collist || ''',''' || 
                                      idx_rec.idx_table_name ||''',''' || 
                                      v_begin_creation_datetime ||''',''' || 
                                      to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM')||''')';
                
                DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.'); 
                
              END IF;
            ELSE
              SELECT table_name 
   	        INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.');
            END IF;
          ELSE 
              BEGIN	            
                FOR v_rec IN (select s_ind.index_name idxname
                                from (select index_name,
                                             max(case when column_position = 1 then column_name else null end) position1,
                                             max(case when column_position = 2 then column_name else null end) position2
                                        from user_ind_columns 
                                       where table_name = idx_rec.idx_table_name
                                       group by index_name ) s_ind
                               where s_ind.position1 = idx_rec.idx_col_name1
                                 and s_ind.position2 = idx_rec.idx_col_name2) LOOP
                  IF (idx_rec.idx_name = v_rec.idxname)
                  THEN
                    DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                  ELSE
                    DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                  END IF;
                END LOOP;
              END;
            END IF;             
          END;
         
      --
      -- Case 3:
      --		
      WHEN idx_rec.idx_size = 3 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with columns [' || idx_rec.idx_col_name1 || ',' || 
                                 idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ']');
          SELECT count(*) 
            INTO v_cnt  
            FROM (SELECT max( case when column_position = 1 then column_name else null end) position1,
                         max( case when column_position = 2 then column_name else null end) position2,
                         max( case when column_position = 3 then column_name else null end) position3
                    from user_ind_columns 
                   where table_name = idx_rec.idx_table_name
                   group by index_name ) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1
             AND s_ind.position2 = idx_rec.idx_col_name2
             AND s_ind.position3 = idx_rec.idx_col_name3;
          
   	  IF v_cnt = 0 
   	  THEN
   	    SELECT COUNT(*) 
   	          INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN
              
              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name1
                 AND TABLE_NAME = idx_rec.idx_table_name; 
              
              SELECT count(*) 
                INTO v_col2Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name2
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col3Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name3
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              IF (v_col1Exists > 0 and v_col2Exists > 0 and v_col3Exists > 0)
              THEN
                
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');
                
                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ') tablespace ' || v_tablespace_name;
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);      
                  EXECUTE IMMEDIATE (v_sqltext);
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ') tablespace ' || v_tablespace_name || ' online';          
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext); 
                  EXECUTE IMMEDIATE (v_sqltext);
                END IF;
				
                -- insert into adhoc_index_list_table   
                v_collist := idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3;
                v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                      to_char(v_ref_number) || ''',''' || 
                                      to_char(v_db_version) || ''',''' || 
                                      idx_rec.idx_name || ''',''' || 
                                      v_collist || ''',''' || 
                                      idx_rec.idx_table_name ||''',''' || 
                                      v_begin_creation_datetime ||''',''' || 
                                      to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM') ||''')';
                
                DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.'); 
                
              END IF;
            ELSE
              SELECT table_name 
   	            INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.');
            END IF;
          ELSE 
            BEGIN	            
            FOR v_rec IN (SELECT S_IND.INDEX_NAME idxName
                            FROM (select index_name,
                                         max(case when column_position = 1 then column_name else null end) position1,
                                         max(case when column_position = 2 then column_name else null end) position2,
                                         max(case when column_position = 3 then column_name else null end) position3
                                    from user_ind_columns 
                                   where table_name = idx_rec.idx_table_name
                                   group by index_name ) s_ind
                           where s_ind.position1 = idx_rec.idx_col_name1
                             and s_ind.position2 = idx_rec.idx_col_name2
                             and s_ind.position3 = idx_rec.idx_col_name3) LOOP
                IF (idx_rec.idx_name = v_rec.idxname)
                THEN
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                ELSE
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                END IF;
            END LOOP;
            end;
          END IF;
        END;

      --
      -- Case 4:
      --		
      WHEN idx_rec.idx_size = 4 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with columns [' || idx_rec.idx_col_name1 || ',' || 
                                 idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || 
                                 idx_rec.idx_col_name4 ||']');
          SELECT count(*) 
            INTO v_cnt  
            FROM (select max( case when column_position = 1 then column_name else null end) position1,
                         max( case when column_position = 2 then column_name else null end) position2,
                         max( case when column_position = 3 then column_name else null end) position3,
                         max( case when column_position = 4 then column_name else null end) position4
                    from user_ind_columns 
                   where table_name = idx_rec.idx_table_name
                   group by index_name ) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1
             AND s_ind.position2 = idx_rec.idx_col_name2
             AND s_ind.position3 = idx_rec.idx_col_name3
             AND s_ind.position4 = idx_rec.idx_col_name4;
          
   	  IF v_cnt = 0 
   	  THEN
   	    SELECT COUNT(*) 
   	      INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN
              
              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name1
                 AND TABLE_NAME = idx_rec.idx_table_name; 
              
              SELECT count(*) 
                INTO v_col2Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name2
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col3Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name3
                 AND TABLE_NAME = idx_rec.idx_table_name;

              SELECT count(*) 
                INTO v_col4Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name4
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              IF (v_col1Exists > 0 and v_col2Exists > 0 and v_col3Exists > 0 and v_col4Exists > 0)
              THEN
                
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');

                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ') tablespace ' || v_tablespace_name;
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);     
                  EXECUTE IMMEDIATE (v_sqltext);
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ') tablespace ' || v_tablespace_name || ' online';          
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);  
                  EXECUTE IMMEDIATE (v_sqltext);
                END IF;
                
                -- insert into adhoc_index_list_table   
                v_collist := idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4;
                v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                      to_char(v_ref_number) || ''',''' || 
                                      to_char(v_db_version) || ''',''' || 
                                      idx_rec.idx_name || ''',''' || 
                                      v_collist || ''',''' || 
                                      idx_rec.idx_table_name ||''',''' || 
                                      v_begin_creation_datetime ||''',''' || 
                                      to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM') ||''')';
									  
                DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.');

              END IF;
            ELSE
              SELECT table_name 
   	            INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.');
            END IF;
          ELSE 
            BEGIN	            
              FOR v_rec IN (select s_ind.index_name idxname
                              from (select index_name,
                                           max(case when column_position = 1 then column_name else null end) position1,
                                           max(case when column_position = 2 then column_name else null end) position2,
                                           max(case when column_position = 3 then column_name else null end) position3,
                                           max(case when column_position = 4 then column_name else null end) position4
                                      from user_ind_columns 
                                     where table_name = idx_rec.idx_table_name
                                     group by index_name ) s_ind
                              where s_ind.position1 = idx_rec.idx_col_name1
                                and s_ind.position2 = idx_rec.idx_col_name2
                                and s_ind.position3 = idx_rec.idx_col_name3
                                and s_ind.position4 = idx_rec.idx_col_name4) LOOP
                IF (idx_rec.idx_name = v_rec.idxname)
                THEN
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                ELSE
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                END IF;
              END LOOP;
            END;
          END IF;
        END;
 
      --
      -- Case 5:
      -- 
      WHEN idx_rec.idx_size = 5 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with columns [' || idx_rec.idx_col_name1 || ',' || 
                                 idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || 
                                 idx_rec.idx_col_name4 || ',' || idx_rec.idx_col_name5 || ']');
          SELECT count(*) 
            INTO v_cnt  
            FROM (SELECT max( case when column_position = 1 then column_name else null end) position1,
                         max( case when column_position = 2 then column_name else null end) position2,
                         max( case when column_position = 3 then column_name else null end) position3,
                         max( case when column_position = 4 then column_name else null end) position4,
                         max( case when column_position = 5 then column_name else null end) position5
                    from user_ind_columns 
                   where table_name = idx_rec.idx_table_name
                   group by index_name ) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1
             AND s_ind.position2 = idx_rec.idx_col_name2
             AND s_ind.position3 = idx_rec.idx_col_name3
             AND s_ind.position4 = idx_rec.idx_col_name4
             AND s_ind.position5 = idx_rec.idx_col_name5;
          
          IF v_cnt = 0 
   	  THEN
   	    SELECT COUNT(*) 
   	      INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN

              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name1
                 AND TABLE_NAME = idx_rec.idx_table_name; 
              
              SELECT count(*) 
                INTO v_col2Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name2
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col3Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name3
                 AND TABLE_NAME = idx_rec.idx_table_name;

              SELECT count(*) 
                INTO v_col4Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name4
                 AND TABLE_NAME = idx_rec.idx_table_name;

              SELECT count(*) 
                INTO v_col5Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name5
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              IF (v_col1Exists > 0 and v_col2Exists > 0 and v_col3Exists > 0 and v_col4Exists > 0 and v_col5Exists > 0)
              THEN
                
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');
         
                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ',' || idx_rec.idx_col_name5 || ') tablespace ' || v_tablespace_name;
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);      
                  EXECUTE IMMEDIATE (v_sqltext);
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ',' || idx_rec.idx_col_name5 || ') tablespace ' || v_tablespace_name || ' online';          
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);  
                  EXECUTE IMMEDIATE (v_sqltext);
                END IF;
                
                v_collist := idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || ',' || idx_rec.idx_col_name5;
                v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                      to_char(v_ref_number) || ''',''' || 
                                      to_char(v_db_version) || ''',''' || 
                                      idx_rec.idx_name || ''',''' || 
                                      v_collist || ''',''' || 
                                      idx_rec.idx_table_name ||''',''' || 
                                      v_begin_creation_datetime ||''',''' || 
                                      to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM') ||''')';
									  
                DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.'); 
                
              END IF;
            ELSE
              SELECT table_name 
   	        INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.');
            END IF;
          ELSE 
            BEGIN	            
              FOR v_rec IN (select s_ind.index_name idxname
                              from (select index_name,
                                           max(case when column_position = 1 then column_name else null end) position1,
                                           max(case when column_position = 2 then column_name else null end) position2,
                                           max(case when column_position = 3 then column_name else null end) position3,
                                           max(case when column_position = 4 then column_name else null end) position4,
                                           max(case when column_position = 5 then column_name else null end) position5
                                      from user_ind_columns 
                                     where table_name = idx_rec.idx_table_name
                                     group by index_name ) s_ind
                             where s_ind.position1 = idx_rec.idx_col_name1
                               and s_ind.position2 = idx_rec.idx_col_name2
                               and s_ind.position3 = idx_rec.idx_col_name3
                               and s_ind.position4 = idx_rec.idx_col_name4
                               and s_ind.position5 = idx_rec.idx_col_name5) LOOP
                IF (idx_rec.idx_name = v_rec.idxname)
                THEN
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                ELSE
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                END IF;
            END LOOP;
            END;
          END IF;
        END;

      --
      -- Case 6:
      --         
      WHEN idx_rec.idx_size = 6 THEN  
        BEGIN
          DBMS_OUTPUT.PUT_LINE ('[INFO] : Check index [' || idx_rec.idx_name || '] on [' || idx_rec.idx_table_name || '] table with columns [' || idx_rec.idx_col_name1 || ',' || 
                                 idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || 
                                 idx_rec.idx_col_name4 || ',' || idx_rec.idx_col_name5 || ',' || 
                                 idx_rec.idx_col_name6 || ']');
          SELECT count(*) 
            INTO v_cnt  
            FROM (SELECT max( case when column_position = 1 then column_name else null end) position1,
                         max( case when column_position = 2 then column_name else null end) position2,
                         max( case when column_position = 3 then column_name else null end) position3,
                         max( case when column_position = 4 then column_name else null end) position4,
                         max( case when column_position = 5 then column_name else null end) position5,
                         max( case when column_position = 6 then column_name else null end) position6
                    from user_ind_columns 
                   where table_name = idx_rec.idx_table_name
                   group by index_name ) s_ind
           WHERE s_ind.position1 = idx_rec.idx_col_name1
             AND s_ind.position2 = idx_rec.idx_col_name2
             AND s_ind.position3 = idx_rec.idx_col_name3
             AND s_ind.position4 = idx_rec.idx_col_name4
             AND s_ind.position5 = idx_rec.idx_col_name5
             AND s_ind.position6 = idx_rec.idx_col_name6;
          
          IF v_cnt = 0 
   	  THEN
   	    SELECT COUNT(*) 
   	      INTO v_idxNameExists
              FROM user_indexes 
             WHERE index_name = idx_rec.idx_name; 
               
            IF v_idxNameExists = 0 
            THEN
              
              SELECT count(*) 
                INTO v_col1Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name1
                 AND TABLE_NAME = idx_rec.idx_table_name; 
              
              SELECT count(*) 
                INTO v_col2Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name2
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col3Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name3
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col4Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name4
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col5Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name5
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              SELECT count(*) 
                INTO v_col6Exists
                FROM USER_TAB_COLUMNS
               WHERE column_name = idx_rec.idx_col_name6
                 AND TABLE_NAME = idx_rec.idx_table_name;
              
              IF (v_col1Exists > 0 and v_col2Exists > 0 and v_col3Exists > 0 and v_col4Exists > 0 and v_col5Exists > 0 and v_col6Exists > 0)
              THEN
                
                v_begin_creation_datetime:= to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM');
                DBMS_OUTPUT.PUT_LINE('[INFO] : Creating index ' || idx_rec.idx_name || ' ...');
                
                IF v_isEnterprise = 0
                THEN
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name ||
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ',' || idx_rec.idx_col_name5 || ',' || idx_rec.idx_col_name6 || 
                                           ') tablespace ' || v_tablespace_name;
                  DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);      
                  EXECUTE IMMEDIATE (v_sqltext);
                ELSE
                  v_sqltext := 'create index ' || idx_rec.idx_name || ' on ' || idx_rec.idx_table_name || 
                                          ' (' || idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || 
                                           ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || 
                                           ',' || idx_rec.idx_col_name5 || ',' || idx_rec.idx_col_name6 ||
                                           ') tablespace ' || v_tablespace_name || ' online';          
                DBMS_OUTPUT.PUT_LINE('SQL TEXT : ' || v_sqltext);  
                EXECUTE IMMEDIATE (v_sqltext);
              END IF;
              
              v_collist := idx_rec.idx_col_name1 || ',' || idx_rec.idx_col_name2 || ',' || idx_rec.idx_col_name3 || ',' || idx_rec.idx_col_name4 || ',' || idx_rec.idx_col_name5 || ',' || idx_rec.idx_col_name6;
              v_cr_ins_statement := 'insert into adhoc_index_list_table values (''' ||
                                    to_char(v_ref_number) || ''',''' || 
                                    to_char(v_db_version) || ''',''' || 
                                    idx_rec.idx_name || ''',''' || 
                                    v_collist || ''',''' || 
                                    idx_rec.idx_table_name ||''',''' || 
                                    v_begin_creation_datetime ||''',''' || 
                                    to_char(systimestamp,'DD-MON-YYYY HH12:MI:SS AM') ||''')';
              
              DBMS_OUTPUT.PUT_LINE('[INFO] : Create index ' || idx_rec.idx_name || ' completed.'); 
              
              END IF;
            ELSE
              SELECT table_name 
   	            INTO v_dupIdxTableName
                FROM user_indexes 
               WHERE index_name = idx_rec.idx_name;               
              DBMS_OUTPUT.PUT_LINE('[WARN] : ' || idx_rec.idx_name || ' index name is used in '  || v_dupIdxTableName || ' table. Please contact BMC BladeLogic support.');
            END IF;
          ELSE 
            BEGIN	            
              FOR v_rec IN (select s_ind.index_name idxname
                              from (select index_name,
                                           max(case when column_position = 1 then column_name else null end) position1,
                                           max(case when column_position = 2 then column_name else null end) position2,
                                           max(case when column_position = 3 then column_name else null end) position3,
                                           max(case when column_position = 4 then column_name else null end) position4,
                                           max(case when column_position = 5 then column_name else null end) position5,
                                           max(case when column_position = 6 then column_name else null end) position6
                                      from user_ind_columns 
                                     where table_name = idx_rec.idx_table_name
                                     group by index_name ) s_ind
                               where s_ind.position1 = idx_rec.idx_col_name1
                                 and s_ind.position2 = idx_rec.idx_col_name2
                                 and s_ind.position3 = idx_rec.idx_col_name3
                                 and s_ind.position4 = idx_rec.idx_col_name4
                                 and s_ind.position5 = idx_rec.idx_col_name5
                                 and s_ind.position6 = idx_rec.idx_col_name6) LOOP
                IF (idx_rec.idx_name = v_rec.idxname)
                THEN
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Index [' || idx_rec.idx_name || '] already existed.');
                ELSE
                  DBMS_OUTPUT.PUT_LINE('[INFO] : Due to index [' || idx_rec.idx_name || '] column list already existed in [' || v_rec.idxname || '] index. This new index will not be added.');
                END IF;
              END LOOP;
            END;
          END IF;
        END;
    ELSE
      BEGIN
        DBMS_OUTPUT.PUT_LINE('[ERROR] :  Invalid index column size :' || idx_rec.idx_size);
      END;
    END CASE;        
  END LOOP;
  
  --
  -- Special case - Replace existing XA6JOB index definition with new one
  -- 	  
  SELECT COUNT(*) INTO v_cnt FROM user_indexes WHERE index_name = 'XA6JOB';
  IF (v_cnt = 1) THEN
    EXECUTE IMMEDIATE 'drop index XA6JOB';
  END IF;
  
  IF v_isEnterprise = 0
  THEN
    EXECUTE IMMEDIATE ('create index XA6JOB on job 
	                  (job_id, job_version_id, object_type_id, is_deleted, is_latest_version) 
					  tablespace ' || v_tablespace_name);
  ELSE	
    EXECUTE IMMEDIATE ('create index XA6JOB on job 
	                  (job_id, job_version_id, object_type_id, is_deleted, is_latest_version) 
					  tablespace ' || v_tablespace_name || ' online');
  END IF;  
 
  -- DBMS_OUTPUT.PUT_LINE('[INFO] : Recreate index XA6JOB completed.');	
  DBMS_OUTPUT.PUT_LINE('----------------------------------------');
  DBMS_OUTPUT.PUT_LINE( 'Total add indexes duration : ' || ((DBMS_UTILITY.GET_TIME()-v_timestart)/100) || ' seconds.'); 
    
  --
  --  Remove the temporary work table
  --
  EXECUTE IMMEDIATE ('DROP TABLE ADD_BMC_IDX_TABLE');
    
  remediation_log_end('add85xIdx.sql');
END;
/

prompt Please check add85xIdx_&mydate..log for execution of add85xIdx.sql and save it for future reference.

spool off

whenever sqlerror continue
whenever oserror continue

SET SERVEROUTPUT OFF
